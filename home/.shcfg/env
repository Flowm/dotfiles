########################################################################
# Host detection
########################################################################

MC_OS=`uname`
case "$MC_OS" in
    Linux)
        MC_LINUX=1
        MC_HOST=`uname -n`
        MC_PLATFORM=`uname -m`
        case "$MC_PLATFORM" in
            armv6l)
                MC_SLOWSYS=1
                ;;
        esac
        if grep -q Microsoft /proc/version; then
            MC_WSL=1
        fi
        MC_DIST_ID=$(grep ^ID= /etc/lsb-release 2>&1 | cut -d= -f2)
        MC_DIST_ID_LIKE=$(grep ^ID_LIKE= /etc/lsb-release 2>&1 | cut -d= -f2)
        ;;
    Darwin)
        MC_OSX=1
        MC_HOST=`hostname -s`
        ;;
    CYGWIN*)
        MC_CYGWIN=1
        MC_HOST=`uname -n`
        ;;
    OpenBSD)
        MC_OPENBSD=1
        MC_HOST=`hostname -s`
        ;;
    *)
        MC_HOST=`echo $HOSTNAME | sed "s/\([a-z]*\)\..*/\1/"`
        ;;
esac

MC_USER=`whoami`
case "$MC_USER" in
    fmaurach)
        MC_WORK=1
        ;;
    flow)
        MC_PRIV=1
        ;;
esac

# SHELL
if [ -n "$ZSH_VERSION" ]; then
    MC_SHELL="zsh"
    MC_ZSH=1
elif [ -n "$BASH_VERSION" ]; then
    MC_SHELL="bash"
    MC_BASH=1
else
    MC_SHELL=$(ps h -p $$ -o args='' | cut -f1 -d' ')
fi

########################################################################
# ENV
########################################################################

export EDITOR="vim"

# Prepend homebrew to path
if [ -d "/opt/homebrew/bin" ]; then
    PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
fi

# Prepend $HOME/bin and all subdirs to the path
if [ -d "$HOME/bin" ]; then
    for d in "$HOME"/bin/*; do
        if [ -d "$d" ]; then
            PATH="${d%%/}:$PATH"
        fi
    done
    PATH="$HOME/bin:$PATH"
fi

# Prepend $HOME/.local/bin to path
if [ -d "$HOME/.local/bin" ]; then
    PATH="$HOME/.local/bin:$PATH"
fi

if [ -n "$MC_PRIV" ]; then
    LOCAL_SBIN_PATH="/usr/local/sbin"
    if [ -d "$LOCAL_SBIN_PATH" ]; then
        export PATH=$PATH:$LOCAL_SBIN_PATH
    fi
fi

# Locale settings. Force en_US.UTF-8 instead of smart detection for now
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
#[ -z "$LANG" ] && [ "$(locale -a | grep en_US.UTF-8)" ] && export LANG="en_US.UTF-8"

if [ -n "$MC_OSX" ] && [ "$TERM_PROGRAM" = "iTerm.app" ]; then
    export LC_TERM="iterm"
fi

if [ -n "$MC_WSL" ]; then
    unsetopt BG_NICE
fi

########################################################################
# SSH Agent
########################################################################

# Handle ssh-agent startup if ~/.myc-sagent exists
if [ -e $HOME/.myc-sagent ] && ! pgrep -u $USER ssh-agent >/dev/null; then
    eval $(ssh-agent -s)
    ssh-add
fi

# Fix symlink for tmux
if [ -S "$SSH_AUTH_SOCK" ] && [ ! -h "$SSH_AUTH_SOCK" ]; then
    ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi
export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock

########################################################################
# SSH hostname in tmux window name
########################################################################

ssh() {
    if [[ "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" == tmux* ]]; then
        tmux rename-window "$(echo $* | awk '{for(i=1; i<=NF; i++) {if($i !~ /^-/) print $i}}')"
        command ssh "$@"
        tmux set-window-option automatic-rename "on" 1>/dev/null
    else
        command ssh "$@"
    fi
}

########################################################################
# Autoattach tmux
########################################################################

# Attach tmux immediately if ~/.myc-tmuxa exists
if [ -e $HOME/.myc-tmuxa ] && [ -z "$TMUX" ] && [[ "$TERM_PROGRAM" != "vscode" ]]; then
    # Also detach immediately if ~/.myc-tmuxad exists
    if [ -e $HOME/.myc-tmuxad ]; then
        tmux new-session -A -s 0 && sleep 1 && exit
    else
        tmux new-session -A -s 0
    fi
fi

########################################################################
# History
########################################################################

# Long history
export HISTSIZE=100000
export SAVEHIST=$HISTSIZE

# Additionally log history to file
if [ -z "$MC_SLOWSYS" ]; then
    export MC_HISTFILE=~/.myconf/history/$(date +%Y)_${MC_HOST}_eternal_history
    (umask 077; touch $MC_HISTFILE)

    if [ "$MC_BASH" ]; then
        _log_hist() {
            ([ -w "$MC_HISTFILE" ] && echo -e "$(date +%F-%H-%M-%S)\t${MC_HOST}\t${MC_SHELL}\t$$\t${MC_USER}\t$(history 1 | sed 's/^ *[0-9]* *//')" >> $MC_HISTFILE &)
        }
        PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ; } _log_hist"
    fi
    if [ "$MC_ZSH" ]; then
        preexec() {
            ([ -w "$MC_HISTFILE" ] && echo -e "$(date +%F-%H-%M-%S)\t${MC_HOST}\t${MC_SHELL}\t$$\t${MC_USER}\t${1}" >> $MC_HISTFILE &)
        }
    fi
fi

########################################################################
# Programm specific
########################################################################

if [ -x "$(command -v direnv)" ]; then
    if [ "$MC_BASH" ]; then
        eval "$(direnv hook bash)"
    fi
    if [ "$MC_ZSH" ]; then
        eval "$(direnv hook zsh)"
    fi
fi

if [ -x "$(command -v mise)" ]; then
    if [ "$MC_BASH" ]; then
        eval "$(mise activate bash)"
    fi
    if [ "$MC_ZSH" ]; then
        eval "$(mise activate zsh)"
    fi
fi

if [ -x "$(command -v github-copilot-cli)" ]; then
    eval "$(github-copilot-cli alias -- "$0")"
fi

if [ -x "$(command -v gcloud)" ] && [ -x "$(command -v brew)" ]; then
    source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
    source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"
fi

########################################################################
# Program path specific
########################################################################

GOPATH="$HOME/Dev/go"
if [ -d "$GOPATH" ]; then
    export GOPATH
    export GOBIN=$GOPATH/bin
    export PATH=$PATH:$GOPATH/bin
fi

TEXBIN_PATH="/Library/TeX/texbin"
if [ -d "$TEXBIN_PATH" ]; then
    export PATH=$PATH:$TEXBIN_PATH
fi

LLVM_PATH="/usr/local/opt/llvm/bin"
if [ -d "$LLVM_PATH" ]; then
    export PATH=$PATH:$LLVM_PATH
fi

RBENV_PATH="$HOME/.rbenv/bin"
if [ -d "$RBENV_PATH" ]; then
    export PATH=$PATH:$RBENV_PATH
    eval "$(rbenv init -)"
fi

GDAL_PATH="/Applications/QGIS.app/Contents/MacOS/bin"
if [ -d "$GDAL_PATH" ] && [ -z "$(command -v gdalinfo)" ]; then
    export PATH=$PATH:$GDAL_PATH
fi

LM_STUDIO_PATH="$HOME/.lmstudio/bin"
if [ -d "$LM_STUDIO_PATH" ]; then
    export PATH=$PATH:$LM_STUDIO_PATH
fi

PIO_PATH="$HOME/.platformio/penv/bin"
if [ -d "$PIO_PATH" ]; then
    export PATH=$PATH:$PIO_PATH
fi

########################################################################
# Host specific
########################################################################

if [ "$MC_HOST" = "spirit" ]; then
    export TERM="xterm-color"
fi
